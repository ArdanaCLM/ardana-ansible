#
# (c) Copyright 2019 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Handle removal of a service by first checking to see if it is actually
# defined, and if so, ensure that it is first disabled, then stopped, at
# which point we can remove the definition, if it was created by Ardana,
# and finally reload the daemon, if necessary, to ensure it forgets about
# the service.
#
# This is implemented in an idempotent fashion so it can be safely called
# any number of times without failing.
---

- name: deprecated-service-removal | main | Get status of specified services
  become: yes
  command: >-
    systemctl status {{ item }}
  changed_when: false
  failed_when: false
  ignore_errors: true
  with_items: "{{ remove_services_list }}"
  register: service_status_result

# Disable in a separate action to stop as sometimes disabling and stopping
# in same action may only disable, but leave service running.
- name: deprecated-service-removal | main | Disable specified services
  become: yes
  service:
    name: "{{ item.item }}"
    enabled: no
  with_items: "{{ service_status_result.results }}"
  failed_when: false
  ignore_errors: true
  when:
    - not (item | failed)

- name: deprecated-service-removal | main | Stop specified services
  become: yes
  service:
    name: "{{ item.item }}"
    state: stopped
  with_items: "{{ service_status_result.results }}"
  failed_when: false
  ignore_errors: true
  when:
    - not (item | failed)

- name: deprecated-service-removal | main | Remove definitions of services
  become: yes
  file:
    path: "/etc/systemd/system/{{ item.item }}.service"
    state: absent
  with_items: "{{ service_status_result.results }}"
  failed_when: false
  ignore_errors: true
  when:
    - not (item | failed)
    - item.stdout | search("/etc/systemd/system/" ~ item.item ~ ".service")
  register: service_definition_removal_result

- name: deprecated-service-removal | main | Reload systemd if needed
  become: yes
  command: >-
    systemctl daemon-reload
  changed_when: false
  when:
    - service_definition_removal_result | changed
